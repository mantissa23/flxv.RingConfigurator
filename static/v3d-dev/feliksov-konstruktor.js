'use strict';
/* __V3D_TEMPLATE__ - template-based file; delete this line to prevent this file from being updated */

import * as appManager from '../scripts/v3d-app/modules/app.js';
import * as shapes from '../scripts/v3d-app/modules/shapes.js';

start('canvas', manRing, womanRing);




//--------------------------------------------------------------------
function start (canvaId, manRing, womanRing) {
  var params = v3d.AppUtils.getPageParams();

  var PUZZLES_DIR = '../../../../puzzles/';
  var logicURL = params.logic ? params.logic : '__LOGIC__visual_logic.js'.replace('__LOGIC__', '');
  var sceneURL = params.load
    ? params.load
    : '__URL__feliksov-konstruktor.gltf'.replace('__URL__', '../assets/');
  if (!sceneURL) {
    console.log('No scene URL specified');
    return;
  }

  // some puzzles can benefit from cache
  v3d.Cache.enabled = true;

  if (v3d.AppUtils.isXML(logicURL)) {
    var logicURLJS = logicURL.match(/(.*)\.xml$/)[1] + '.js';
    new v3d.PuzzlesLoader().loadEditorWithLogic(PUZZLES_DIR, logicURLJS, function() {
      var initOptions = v3d.PL ? v3d.PL.execInitPuzzles().initOptions : { useFullscreen: true };
      loadScene(sceneURL, initOptions);
    });
  } else if (v3d.AppUtils.isJS(logicURL)) {
    new v3d.PuzzlesLoader().loadLogic(logicURL, function() {
      var initOptions = v3d.PL ? v3d.PL.execInitPuzzles().initOptions : { useFullscreen: true };
      loadScene(sceneURL, initOptions);
    });
  } else {
    loadScene(sceneURL, { useFullscreen: true });
  }

  function loadScene(sceneURL, initOptions) {
    initOptions = initOptions || {};

    var ctxSettings = {};
    initOptions.useBkgTransp = true;
    // console.log(initOptions);
    if (initOptions.useBkgTransp) ctxSettings.alpha = true;
    if (initOptions.preserveDrawBuf) ctxSettings.preserveDrawingBuffer = true;

    //var preloader = initOptions.useCustomPreloader
    //  ? createCustomPreloader(initOptions.preloaderProgressCb, initOptions.preloaderEndCb)
    //  : new v3d.SimplePreloader({ container: canvaId });
    var preloader = null;
    var app = new v3d.App(canvaId, ctxSettings, preloader);
    if (initOptions.useBkgTransp) {
      app.clearBkgOnLoad = true;
      app.renderer.setClearColor(0x000000, 0);
    }

    // namespace for communicating with code generated by Puzzles
    app.ExternalInterface = {};
    prepareExternalInterface(app);

    if (initOptions.preloaderStartCb) initOptions.preloaderStartCb();
    if (initOptions.useFullscreen) {
      initFullScreen();
    } else {
      var fsButton = document.getElementById('fullscreen_button');
      if (fsButton) fsButton.style.display = 'none';
    }

    sceneURL = initOptions.useCompAssets ? sceneURL + '.xz' : sceneURL;
    app.loadScene(
      sceneURL,
      function() {
        var spinner = document.getElementById('lrSpinner');
        spinner.style.zIndex = -100;
        spinner.style.opacity = 100;

        app.enableControls();
        app.run();

        if (v3d.PE) v3d.PE.updateAppInstance(app);
        if (v3d.PL) v3d.PL.init(app, initOptions);

        runCode(app);
      },
      null,
      function() {
        console.log("Can't load the scene " + sceneURL);
      }
    );

    return app;
  }

  function createCustomPreloader(updateCb, finishCb) {
    function CustomPreloader() {
      v3d.Preloader.call(this);
    }

    CustomPreloader.prototype = Object.assign(Object.create(v3d.Preloader.prototype), {
      onUpdate: function(percentage) {
        v3d.Preloader.prototype.onUpdate.call(this, percentage);
        if (updateCb) updateCb(percentage);
      },
      onFinish: function() {
        v3d.Preloader.prototype.onFinish.call(this);
        if (finishCb) finishCb();
      },
    });

    return new CustomPreloader();
  }

  function initFullScreen() {
    var fsButton = document.getElementById('fullscreen_button');
    if (!fsButton) return;

    if (
      document.fullscreenEnabled ||
      document.webkitFullscreenEnabled ||
      document.mozFullScreenEnabled ||
      document.msFullscreenEnabled
    )
      fullscreen_button.style.display = 'inline';

    fullscreen_button.addEventListener('click', function(event) {
      event.stopPropagation();
      if (
        document.fullscreenElement ||
        document.webkitFullscreenElement ||
        document.mozFullScreenElement ||
        document.msFullscreenElement
      ) {
        exitFullscreen();
      } else requestFullscreen(document.body);
    });

    function changeFullscreen() {
      if (
        document.fullscreenElement ||
        document.webkitFullscreenElement ||
        document.mozFullScreenElement ||
        document.msFullscreenElement
      )
        fullscreen_button.className = 'fullscreen-close';
      else fullscreen_button.className = 'fullscreen-open';
    }

    document.addEventListener('webkitfullscreenchange', changeFullscreen);
    document.addEventListener('mozfullscreenchange', changeFullscreen);
    document.addEventListener('msfullscreenchange', changeFullscreen);
    document.addEventListener('fullscreenchange', changeFullscreen);

    function requestFullscreen(elem) {
      if (elem.requestFullscreen) elem.requestFullscreen();
      else if (elem.mozRequestFullScreen) elem.mozRequestFullScreen();
      else if (elem.webkitRequestFullscreen) elem.webkitRequestFullscreen();
      else if (elem.msRequestFullscreen) elem.msRequestFullscreen();
    }

    function exitFullscreen() {
      if (document.exitFullscreen) document.exitFullscreen();
      else if (document.mozCancelFullScreen) document.mozCancelFullScreen();
      else if (document.webkitExitFullscreen) document.webkitExitFullscreen();
      else if (document.msExitFullscreen) document.msExitFullscreen();
    }
  }

  //связующее звено между кодом и паззлами
  function prepareExternalInterface(app) {
    // обработка события изменения параметров
    app.ExternalInterface.OnChangeSize = function() {
      console.log('Event OnChangeSize');
      //updateShape(app, ActiveShapeName, manRingSizeX, manRingSizeY);
      //updateMesh(app, ActiveShapeName, manRingSize, GenerationMode);
    };

    //обновление типа материала 1
    app.ExternalInterface.OnChangeMaterial1 = function() {
      console.log('Event OnChangeMaterial1');
      var value = document.getElementById('cbMaterial1').value;
      switch (GenerationMode) {
        case 'BOTH':
          if (value == 'yellowPolished') {
            manRing.material1.color = 'yellow';
            womanRing.material1.color = 'yellow';
            manRing.material1.surface = 'polished';
            womanRing.material1.surface = 'polished';
          }
          if (value == 'yellowMatt') {
            manRing.material1.color = 'yellow';
            womanRing.material1.color = 'yellow';
            manRing.material1.surface = 'matt';
            womanRing.material1.surface = 'matt';
          }
          if (value == 'whiteMatt') {
            manRing.material1.color = 'white';
            womanRing.material1.color = 'white';
            manRing.material1.surface = 'matt';
            womanRing.material1.surface = 'matt';
          }
          if (value == 'whitePolished') {
            manRing.material1.color = 'white';
            womanRing.material1.color = 'white';
            manRing.material1.surface = 'polished';
            womanRing.material1.surface = 'polished';
          }
          if (value == 'rhodium') {
            manRing.material1.color = 'white';
            womanRing.material1.color = 'white';
            manRing.material1.surface = 'rhodium';
            womanRing.material1.surface = 'rhodium';
          }
          if (value == 'yellowMattCross') {
            manRing.material1.color = 'yellow';
            womanRing.material1.color = 'yellow';
            manRing.material1.surface = 'mattCross';
            womanRing.material1.surface = 'mattCross';
          }
          if (value == 'whiteMattCross') {
            manRing.material1.color = 'white';
            womanRing.material1.color = 'white';
            manRing.material1.surface = 'mattCross';
            womanRing.material1.surface = 'mattCross';
          }
          //manRing.division = "m1m1";
          //womanRing.division = "m1m1";
          //document.getElementById("cbDiv").value = "M1M1";
          break;
        case 'MAN':
          if (value == 'yellowPolished') {
            manRing.material1.color = 'yellow';
            manRing.material1.surface = 'polished';
          }
          if (value == 'yellowMatt') {
            manRing.material1.color = 'yellow';
            manRing.material1.surface = 'matt';
          }
          if (value == 'whitePolished') {
            manRing.material1.color = 'white';
            manRing.material1.surface = 'polished';
          }
          if (value == 'whiteMatt') {
            manRing.material1.color = 'white';
            manRing.material1.surface = 'matt';
          }
          if (value == 'rhodium') {
            manRing.material1.color = 'white';
            manRing.material1.surface = 'rhodium';
          }
          if (value == 'yellowMattCross') {
            manRing.material1.color = 'yellow';
            manRing.material1.surface = 'mattCross';
          }
          if (value == 'whiteMattCross') {
            manRing.material1.color = 'white';
            womanRing.material1.surface = 'mattCross';
          }
          //manRing.division = "m1m1";
          //document.getElementById("cbDiv").value = "M1M1";
          break;
        case 'WOMAN':
          if (value == 'yellowPolished') {
            womanRing.material1.color = 'yellow';
            womanRing.material1.surface = 'polished';
          }
          if (value == 'yellowMatt') {
            womanRing.material1.color = 'yellow';
            womanRing.material1.surface = 'matt';
          }
          if (value == 'whitePolished') {
            womanRing.material1.color = 'white';
            womanRing.material1.surface = 'polished';
          }
          if (value == 'whiteMatt') {
            womanRing.material1.color = 'white';
            womanRing.material1.surface = 'matt';
          }
          if (value == 'rhodium') {
            womanRing.material1.color = 'white';
            womanRing.material1.surface = 'rhodium';
          }
          if (value == 'yellowMattCross') {
            womanRing.material1.color = 'yellow';
            womanRing.material1.surface = 'mattCross';
          }
          if (value == 'whiteMattCross') {
            womanRing.material1.color = 'white';
            womanRing.material1.surface = 'mattCross';
          }
          //womanRing.division = "m1m1";
          //document.getElementById("cbDiv").value = "M1M1";
          break;
      }
      updateRings();
    };

    //обновление типа материала 2
    app.ExternalInterface.OnChangeMaterial2 = function() {
      console.log('Event OnChangeMaterial2');
      var value = document.getElementById('cbMaterial2').value;
      switch (GenerationMode) {
        case 'BOTH':
          if (value == 'yellowPolished') {
            manRing.material2.color = 'yellow';
            womanRing.material2.color = 'yellow';
            manRing.material2.surface = 'polished';
            womanRing.material2.surface = 'polished';
          }
          if (value == 'yellowMatt') {
            manRing.material2.color = 'yellow';
            womanRing.material2.color = 'yellow';
            manRing.material2.surface = 'matt';
            womanRing.material2.surface = 'matt';
          }
          if (value == 'whiteMatt') {
            manRing.material2.color = 'white';
            womanRing.material2.color = 'white';
            manRing.material2.surface = 'matt';
            womanRing.material2.surface = 'matt';
          }
          if (value == 'whitePolished') {
            manRing.material2.color = 'white';
            womanRing.material2.color = 'white';
            manRing.material2.surface = 'polished';
            womanRing.material2.surface = 'polished';
          }
          if (value == 'rhodium') {
            manRing.material2.color = 'white';
            womanRing.material2.color = 'white';
            manRing.material2.surface = 'rhodium';
            womanRing.material2.surface = 'rhodium';
          }
          if (value == 'yellowMattCross') {
            manRing.material2.color = 'yellow';
            womanRing.material2.color = 'yellow';
            manRing.material2.surface = 'mattCross';
            womanRing.material2.surface = 'mattCross';
          }
          if (value == 'whiteMattCross') {
            manRing.material2.color = 'white';
            womanRing.material2.color = 'white';
            manRing.material2.surface = 'mattCross';
            womanRing.material2.surface = 'mattCross';
          }
          //manRing.division = "m1m1";
          //womanRing.division = "m1m1";
          //document.getElementById("cbDiv").value = "M1M1";
          break;
        case 'MAN':
          if (value == 'yellowPolished') {
            manRing.material2.color = 'yellow';
            manRing.material2.surface = 'polished';
          }
          if (value == 'yellowMatt') {
            manRing.material2.color = 'yellow';
            manRing.material2.surface = 'matt';
          }
          if (value == 'whitePolished') {
            manRing.material2.color = 'white';
            manRing.material2.surface = 'polished';
          }
          if (value == 'whiteMatt') {
            manRing.material2.color = 'white';
            manRing.material2.surface = 'matt';
          }
          if (value == 'rhodium') {
            manRing.material2.color = 'white';
            manRing.material2.surface = 'rhodium';
          }
          if (value == 'yellowMattCross') {
            manRing.material2.color = 'yellow';
            manRing.material2.surface = 'mattCross';
          }
          if (value == 'whiteMattCross') {
            manRing.material2.color = 'white';
            manRing.material2.surface = 'mattCross';
          }
          //manRing.division = "m1m1";
          //document.getElementById("cbDiv").value = "M1M1";
          break;
        case 'WOMAN':
          if (value == 'yellowPolished') {
            womanRing.material2.color = 'yellow';
            womanRing.material2.surface = 'polished';
          }
          if (value == 'yellowMatt') {
            womanRing.material2.color = 'yellow';
            womanRing.material2.surface = 'matt';
          }
          if (value == 'whitePolished') {
            womanRing.material2.color = 'white';
            womanRing.material2.surface = 'polished';
          }
          if (value == 'whiteMatt') {
            womanRing.material2.color = 'white';
            womanRing.material2.surface = 'matt';
          }
          if (value == 'rhodium') {
            womanRing.material2.color = 'white';
            womanRing.material2.surface = 'rhodium';
          }
          if (value == 'yellowMattCross') {
            womanRing.material2.color = 'yellow';
            womanRing.material2.surface = 'mattCross';
          }
          if (value == 'whiteMattCross') {
            womanRing.material2.color = 'white';
            womanRing.material2.surface = 'mattCross';
          }
          //womanRing.division = "m1m1";
          //document.getElementById("cbDiv").value = "M1M1";
          break;
      }
      updateRings();
    };
    //обновление данных кольца, получаемых из UI
    //
    app.ExternalInterface.OnChangeSize = function() {
      switch (GenerationMode) {
        case 'BOTH':
          manRing.size = parseFloat(document.getElementById('cbSize').value);
          womanRing.size = parseFloat(document.getElementById('cbSize').value);
          break;
        case 'MAN':
          manRing.size = parseFloat(document.getElementById('cbSize').value);
          break;
        case 'WOMAN':
          womanRing.size = parseFloat(document.getElementById('cbSize').value);
          break;
      }
      updateRings();
      console.log('Event OnChangeSize');
    };
    //
    app.ExternalInterface.OnChangeSizeX = function() {
      var resultShape;
      switch (GenerationMode) {
        case 'BOTH':
          manRing.shape.sizeX = parseFloat(document.getElementById('cbSizeX').value);
          womanRing.shape.sizeX = parseFloat(document.getElementById('cbSizeX').value);

          if (manRing.grooves.name != 'none') {
            resultShape = manRing.shape.name + '_' + manRing.grooves.name;
          } else {
            resultShape = manRing.shape.name;
          }

          if (womanRing.grooves.name != 'none') {
            resultShape = womanRing.shape.name + '_' + womanRing.grooves.name;
          } else {
            resultShape = womanRing.shape.name;
          }
          break;
        case 'MAN':
          manRing.shape.sizeX = parseFloat(document.getElementById('cbSizeX').value);

          if (manRing.grooves.name != 'none') {
            resultShape = manRing.shape.name + '_' + manRing.grooves.name;
          } else {
            resultShape = manRing.shape.name;
          }
          break;
        case 'WOMAN':
          womanRing.shape.sizeX = parseFloat(document.getElementById('cbSizeX').value);

          if (womanRing.grooves.name != 'none') {
            resultShape = womanRing.shape.name + '_' + womanRing.grooves.name;
          } else {
            resultShape = womanRing.shape.name;
          }
          break;
      }
      updateRings();
      console.log('Event OnChangeSizeX');
    };
    //
    app.ExternalInterface.OnChangeSizeY = function() {
      var resultShape;
      switch (GenerationMode) {
        case 'BOTH':
          manRing.shape.sizeY = parseFloat(document.getElementById('cbSizeY').value);
          womanRing.shape.sizeY = parseFloat(document.getElementById('cbSizeY').value);
          if (manRing.grooves.name != 'none') {
            resultShape = manRing.shape.name + '_' + manRing.grooves.name;
          } else {
            resultShape = manRing.shape.name;
          }

          if (womanRing.grooves.name != 'none') {
            resultShape = womanRing.shape.name + '_' + womanRing.grooves.name;
          } else {
            resultShape = womanRing.shape.name;
          }
          break;
        case 'MAN':
          manRing.shape.sizeY = parseFloat(document.getElementById('cbSizeY').value);
          if (manRing.grooves.name != 'none') {
            resultShape = manRing.shape.name + '_' + manRing.grooves.name;
          } else {
            resultShape = manRing.shape.name;
          }
          break;
        case 'WOMAN':
          womanRing.shape.sizeY = parseFloat(document.getElementById('cbSizeY').value);
          if (womanRing.grooves.name != 'none') {
            resultShape = womanRing.shape.name + '_' + womanRing.grooves.name;
          } else {
            resultShape = womanRing.shape.name;
          }
          break;
      }
      updateRings();
      console.log('Event OnChangeSizeY');
    };
    //
    app.ExternalInterface.OnChangeProfile = function() {
      var resultShape;
      switch (GenerationMode) {
        case 'BOTH':
          manRing.shape.name = document.getElementById('cbProfile').value;
          womanRing.shape.name = document.getElementById('cbProfile').value;
          if (manRing.grooves.name != 'none') {
            resultShape = manRing.shape.name + '_' + manRing.grooves.name;
          } else {
            resultShape = manRing.shape.name;
          }

          if (womanRing.grooves.name != 'none') {
            resultShape = womanRing.shape.name + '_' + womanRing.grooves.name;
          } else {
            resultShape = womanRing.shape.name;
          }
          break;
        case 'MAN':
          manRing.shape.name = document.getElementById('cbProfile').value;
          if (manRing.grooves.name != 'none') {
            resultShape = manRing.shape.name + '_' + manRing.grooves.name;
          } else {
            resultShape = manRing.shape.name;
          }
          break;
        case 'WOMAN':
          womanRing.shape.name = document.getElementById('cbProfile').value;
          if (womanRing.grooves.name != 'none') {
            resultShape = womanRing.shape.name + '_' + womanRing.grooves.name;
          } else {
            resultShape = womanRing.shape.name;
          }
          break;
      }
      updateRings();
      console.log('Event OnChangeProfile');
    };
    //
    app.ExternalInterface.OnChangeMode = function() {
      console.log('Event OnChangeMode');
      GenerationMode = document.getElementById('cbMode').value;
      switch (GenerationMode) {
        case 'BOTH':
          if (manRing.size != womanRing.size) {
            document.getElementById('cbSize').value = ' ';
          }
          if (manRing.shape.sizeX != womanRing.shape.sizeX) {
            document.getElementById('cbSizeX').value = ' ';
          }
          if (manRing.shape.sizeY != womanRing.shape.sizeY) {
            document.getElementById('cbSizeY').value = ' ';
          }
          if (manRing.shape.name != womanRing.shape.name) {
            document.getElementById('cbProfile').value = ' ';
          }
          if (manRing.division != womanRing.division) {
            document.getElementById('cbDiv').value = ' ';
          }
          if (manRing.grooves.name != womanRing.grooves.name) {
            document.getElementById('cbGrooves').value = ' ';
          }
          break;
        case 'MAN':
          document.getElementById('cbSize').value = manRing.size;
          document.getElementById('cbSizeX').value = manRing.shape.sizeX;
          document.getElementById('cbSizeY').value = manRing.shape.sizeY;
          document.getElementById('cbProfile').value = manRing.shape.name;
          document.getElementById('cbDiv').value = manRing.division;
          document.getElementById('cbGrooves').value = manRing.grooves.name;
          break;
        case 'WOMAN':
          document.getElementById('cbSize').value = womanRing.size;
          document.getElementById('cbSizeX').value = womanRing.shape.sizeX;
          document.getElementById('cbSizeY').value = womanRing.shape.sizeY;
          document.getElementById('cbProfile').value = womanRing.shape.name;
          document.getElementById('cbDiv').value = womanRing.division;
          document.getElementById('cbGrooves').value = womanRing.grooves.name;
          break;
      }
      //Ring3D.render.updateCanvas();
    };
    //
    app.ExternalInterface.OnChangeDiv = function() {
      console.log('Event OnChangeDiv');
      switch (GenerationMode) {
        case 'BOTH':
          manRing.division = document.getElementById('cbDiv').value;
          womanRing.division = document.getElementById('cbDiv').value;
          break;
        case 'MAN':
          manRing.division = document.getElementById('cbDiv').value;
          break;
        case 'WOMAN':
          womanRing.division = document.getElementById('cbDiv').value;
          break;
      }
      updateRings();
    };
    //
    app.ExternalInterface.OnChangeGrooves = function() {
      console.log('Event OnChangeGrooves');
      var resultShape;
      switch (GenerationMode) {
        case 'BOTH':
          manRing.grooves.name = document.getElementById('cbGrooves').value;
          womanRing.grooves.name = document.getElementById('cbGrooves').value;
          if (manRing.grooves.name != 'none') {
            resultShape = manRing.shape.name + '_' + manRing.grooves.name;
          } else {
            resultShape = manRing.shape.name;
          }

          if (womanRing.grooves.name != 'none') {
            resultShape = womanRing.shape.name + '_' + womanRing.grooves.name;
          } else {
            resultShape = womanRing.shape.name;
          }
          break;
        case 'MAN':
          manRing.grooves.name = document.getElementById('cbGrooves').value;
          if (manRing.grooves.name != 'none') {
            resultShape = manRing.shape.name + '_' + manRing.grooves.name;
          } else {
            resultShape = manRing.shape.name;
          }
          break;
        case 'WOMAN':
          womanRing.grooves.name = document.getElementById('cbGrooves').value;
          if (womanRing.grooves.name != 'none') {
            resultShape = womanRing.shape.name + '_' + womanRing.grooves.name;
          } else {
            resultShape = womanRing.shape.name;
          }

          break;
      }
      updateRings();
    };

    app.ExternalInterface.OnChangeJems = function() {
      console.log('Event OnChangeJems');
      switch (GenerationMode) {
        case 'BOTH':
          manRing.diamonds.position = document.getElementById('cbJems').value;
          womanRing.diamonds.position = document.getElementById('cbJems').value;
          manRing.diamonds.stones = document.getElementById('cbJemsSize').value;
          womanRing.diamonds.stones = document.getElementById('cbJemsSize').value;
          manRing.diamonds.mode = 'user';
          womanRing.diamonds.mode = 'user';
          manRing.diamonds.rows = document.getElementById('cbGemsRow').value;
          womanRing.diamonds.rows = document.getElementById('cbGemsRow').value;
          if (document.getElementById('cbJemsSize').value == 'all') {
            manRing.diamonds.mode = 'max';
            womanRing.diamonds.mode = 'max';
          }
          if (document.getElementById('cbJemsSize').value == 'half') {
            manRing.diamonds.mode = 'half';
            womanRing.diamonds.mode = 'half';
          }
          if (document.getElementById('cbJemsSize').value == 'third') {
            manRing.diamonds.mode = 'third';
            womanRing.diamonds.mode = 'third';
          }
          break;
        case 'MAN':
          manRing.diamonds.position = document.getElementById('cbJems').value;
          manRing.diamonds.stones = document.getElementById('cbJemsSize').value;
          manRing.diamonds.mode = 'user';
          manRing.diamonds.rows = document.getElementById('cbGemsRow').value;
          if (document.getElementById('cbJemsSize').value == 'all') {
            manRing.diamonds.mode = 'max';
          }
          if (document.getElementById('cbJemsSize').value == 'half') {
            manRing.diamonds.mode = 'half';
          }
          if (document.getElementById('cbJemsSize').value == 'third') {
            manRing.diamonds.mode = 'third';
          }
          break;
        case 'WOMAN':
          womanRing.diamonds.position = document.getElementById('cbJems').value;
          womanRing.diamonds.stones = document.getElementById('cbJemsSize').value;
          womanRing.diamonds.mode = 'user';
          womanRing.diamonds.rows = document.getElementById('cbGemsRow').value;
          if (document.getElementById('cbJemsSize').value == 'all') {
            womanRing.diamonds.mode = 'max';
          }
          if (document.getElementById('cbJemsSize').value == 'half') {
            womanRing.diamonds.mode = 'half';
          }
          if (document.getElementById('cbJemsSize').value == 'third') {
            womanRing.diamonds.mode = 'third';
          }
          break;
      }
      // console.log (manRing,womanRing);
      updateRings();
    };

}

  /** @description Выполняемый код после загрузки v3d
   * @param {object} app Инстанс приложения v3d
   */
  function runCode(app) {
    app.enableSSAA(4, false);
    // disable node with spinner
    var spinner = document.getElementById('lrSpinner');
    spinner.style.zIndex = -100;

    GenerationMode = 'BOTH';



    // загружаем шейп и выполняем начальный рендер модели
    loadShapes(app);

  }
  return true;
};

function updateRings() {
  // enable node with spinner
  const spinner = document.getElementById('lrSpinner');
  const res = null;
  spinner.style.zIndex = 100;
  spinner.style.opacity = 100;

  setTimeout(function() {
    const promise = new Promise((resolve, reject) => {
      if (['BOTH', 'MAN'].includes(GenerationMode)) {
        appManager.update('man', manRing, 'pointLeft');
      }

      if (['BOTH', 'WOMAN'].includes(GenerationMode)) {
        appManager.update('woman', womanRing, 'pointRight');
      }
      resolve();
    });

    promise.then(() => {
      // disable node with spinner
       spinner.style.zIndex = -100;
       spinner.style.opacity = 0;
    });
  }, 10);

}

function loadShapes(app) {
  let v3dLoader = new v3d.SVGLoader();
  const shapesPromise = Object.keys(shapes.original).map(
    shapeName =>
    new Promise((resolve, reject) => {
      v3dLoader.load(
        `../shapes/shape_${shapeName}.svg`,
        paths => {
          const shapeObject = paths[0].toShapes(true);
          shapes.original[shapeName] = shapeObject[0];
          resolve(shapeObject[0]);
        },
        null,
        err => reject(err)
      );
    })
  );

    Promise.all(shapesPromise).then(
    () => {
      // инициализируем модули
      appManager.init_dev(app);

      appManager.update('man', manRing, 'pointLeft');
      appManager.update('woman', womanRing, 'pointRight');
    },
    reason => {
      const {
        target
      } = reason;
      throw new Error(`[shapesPromise/Error]: ${target.responseURL} - ${target.statusText}`);
    }
  );
}


